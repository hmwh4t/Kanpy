#:import APP_COLORS main.APP_COLORS
#:import dp kivy.metrics.dp

#:set NERD_FONT "NerdFont"

# A custom toast notification widget.
<Toast>:
    background_color: 0, 0, 0, 0
    size_hint: None, None
    size: label.texture_size
    pos_hint: {'center_x': .5, 'center_y': .1}
    Label:
        id: label
        text: root.text
        size_hint: None, None
        text_size: dp(280), None
        size: self.texture_size
        padding: [dp(15), dp(10)]
        halign: 'center'
        canvas.before:
            Color:
                rgba: [0.1, 0.1, 0.1, 0.9]
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]

# A styled button for use in dialogs and context menus.
<DialogButton@Button>:
    background_color: 0, 0, 0, 0
    size_hint_y: None
    height: '48dp'
    halign: 'left'
    padding_x: '12dp'
    text_size: self.width - dp(24), None
    color: APP_COLORS['text']
    canvas.before:
        Color:
            rgba: APP_COLORS['hover'] if self.state == 'down' else (0,0,0,0)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(8),]

# A popup for getting text input from the user.
<TextInputPopup>:
    background_color: 0, 0, 0, .5
    BoxLayout:
        id: content_box
        orientation: 'vertical'
        padding: '15dp'
        spacing: '10dp'
        size_hint: .9, None
        height: self.minimum_height
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]
        Label:
            text: root.title
            font_size: '20sp'
            height: '40dp'
            size_hint_y: None
            color: APP_COLORS['text']
        TextInput:
            id: text_input
            hint_text: root.hint_text
            multiline: False
            size_hint_y: None
            height: '44dp'
            password: root.is_password
            focus: True
        Button:
            text: 'Submit'
            size_hint_y: None
            height: '48dp'
            on_press: root.on_submit(text_input.text)
            background_color: 0,0,0,0
            color: APP_COLORS['white']
            canvas.before:
                Color:
                    rgba: APP_COLORS['primary_dark'] if self.state == 'down' else APP_COLORS['primary']
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [dp(24),]

# A popup that shows a list of lists to move a card to.
<MoveCardPopup>:
    background_color: 0, 0, 0, .5
    size_hint: 0.85, 0.6
    BoxLayout:
        orientation: 'vertical'
        padding: '15dp'
        spacing: '10dp'
        size_hint: 1, 1
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]
        Label:
            text: "Move Card To..."
            font_size: '20sp'
            size_hint_y: None
            height: '40dp'
            bold: True
            color: APP_COLORS['text']
        ScrollView:
            GridLayout:
                id: list_container
                cols: 1
                size_hint_y: None
                height: self.minimum_height
                spacing: '5dp'

# A context menu for a card, providing options like edit, move, delete.
<CardContextMenu>:
    size_hint: None, None
    width: dp(200)
    height: content_box.height
    background_color: 0,0,0,0
    auto_dismiss: True
    pos_hint: {'center_x': 0.5, 'center_y': 0.5}
    BoxLayout:
        id: content_box
        orientation: 'vertical'
        padding: '4dp'
        size_hint_y: None
        height: self.minimum_height
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(8),]
            Color:
                rgba: APP_COLORS['border']
            Line:
                width: dp(1)
                rounded_rectangle: (self.x, self.y, self.width, self.height, dp(8))
        DialogButton:
            id: edit_button
            text: "Edit"
            on_press: root.edit_card()
        DialogButton:
            text: "Set Priority"
            on_press: root.set_priority()
            # Disable this button if the card is in a completed list
            disabled: root.card_widget.is_in_completed_list
        DialogButton:
            id: move_button
            text: "Move"
            on_press: root.move_card()
        DialogButton:
            text: "Move to Bin"
            color: APP_COLORS['red']
            on_press: root.delete_card()

# A dialog for workspace options like renaming, changing password, or deleting.
<WorkspaceOptionsDialog>:
    background_color: 0, 0, 0, .5
    size_hint: 0.85, None
    height: content_box.height
    BoxLayout:
        id: content_box
        orientation: 'vertical'
        size_hint_y: None
        height: self.minimum_height
        padding: '15dp'
        spacing: '10dp'
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]
        Label:
            text: f"Options for '{root.workspace_name}'"
            font_size: '20sp'
            size_hint_y: None
            height: '40dp'
            bold: True
            color: APP_COLORS['text']
        DialogButton:
            text: 'Rename'
            on_press: app.rename_workspace(root.workspace_name); root.dismiss()
        DialogButton:
            text: 'Change Password' if root.is_encrypted else 'Add Password'
            on_press: app.set_workspace_password(root.workspace_name); root.dismiss()
        DialogButton:
            text: 'Delete'
            color: APP_COLORS['red']
            on_press: app.delete_workspace(root.workspace_name); root.dismiss()

# A dialog for board options like renaming, opening the bin, or deleting.
<BoardOptionsDialog>:
    background_color: 0, 0, 0, .5
    size_hint: 0.85, None
    height: content_box.height
    BoxLayout:
        id: content_box
        orientation: 'vertical'
        size_hint_y: None
        height: self.minimum_height
        padding: '15dp'
        spacing: '10dp'
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]
        Label:
            text: "Board Options"
            font_size: '20sp'
            size_hint_y: None
            height: '40dp'
            bold: True
            color: APP_COLORS['text']
        DialogButton:
            text: 'Rename Board'
            on_press: root.board_screen.rename_current_board_popup(); root.dismiss()
        DialogButton:
            text: 'Rearrange Lists'
            on_press: root.dismiss(); root.board_screen.open_rearrange_dialog()
        DialogButton:
            text: 'Open Bin'
            on_press: root.open_bin()
        DialogButton:
            text: 'Delete Board'
            color: APP_COLORS['red']
            on_press: root.delete_board()

# A dialog that prompts the user to create a new board when none exist.
<CreateBoardDialog>:
    background_color: 0, 0, 0, .5
    size_hint: 0.85, None
    height: content_box.height
    BoxLayout:
        id: content_box
        orientation: 'vertical'
        size_hint_y: None
        height: self.minimum_height
        padding: '15dp'
        spacing: '10dp'
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]
        Label:
            text: "No more boards. Create a new one?"
            font_size: '18sp'
            size_hint_y: None
            height: '40dp'
            color: APP_COLORS['text']
        BoxLayout:
            size_hint_y: None
            height: '48dp'
            spacing: '10dp'
            Button:
                text: "Yes"
                on_press: root.create_new_board()
                background_color: 0,0,0,0
                color: APP_COLORS['white']
                canvas.before:
                    Color:
                        rgba: APP_COLORS['accent']
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24),]
            Button:
                text: "No"
                on_press: root.dismiss()
                background_color: 0,0,0,0
                color: APP_COLORS['text_secondary']
                canvas.before:
                    Color:
                        rgba: APP_COLORS['white']
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24),]
                    Color:
                        rgba: APP_COLORS['border']
                    Line:
                        width: dp(1)
                        rounded_rectangle: (self.x, self.y, self.width, self.height, dp(24))

# A context menu for a list, providing options like rename, set as completed, and move to bin.
<ListContextMenu>:
    size_hint: None, None
    size: dp(220), dp(150)
    background_color: 0,0,0,0
    auto_dismiss: True
    pos_hint: {'center_x': 0.5, 'center_y': 0.5}
    BoxLayout:
        orientation: 'vertical'
        padding: '4dp'
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(8),]
            Color:
                rgba: APP_COLORS['border']
            Line:
                width: dp(1)
                rounded_rectangle: (self.x, self.y, self.width, self.height, dp(8))
        DialogButton:
            text: "Rename"
            on_press: root.rename()
        DialogButton:
            id: completed_button
            text: "Set as Completed"
            on_press: root.set_as_completed()
        DialogButton:
            text: "Move to Bin"
            color: APP_COLORS['red']
            on_press: root.move_to_bin()

# A generic confirmation popup with "Cancel" and "Confirm" buttons.
<ConfirmationPopup>:
    background_color: 0, 0, 0, .5
    BoxLayout:
        orientation: 'vertical'
        padding: '15dp'
        spacing: '10dp'
        size_hint: .9, None
        height: self.minimum_height
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]
        Label:
            text: root.title
            font_size: '20sp'
            height: '40dp'
            size_hint_y: None
            bold: True
            color: APP_COLORS['text']
        Label:
            text: root.text
            size_hint_y: None
            height: self.texture_size[1] + dp(20)
            text_size: self.width, None
            color: APP_COLORS['text_secondary']
        BoxLayout:
            size_hint_y: None
            height: '48dp'
            spacing: '10dp'
            Button:
                text: "Cancel"
                on_press: root.dismiss()
                background_color: 0,0,0,0
                color: APP_COLORS['text_secondary']
                canvas.before:
                    Color:
                        rgba: APP_COLORS['white']
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24),]
                    Color:
                        rgba: APP_COLORS['border']
                    Line:
                        width: dp(1)
                        rounded_rectangle: (self.x, self.y, self.width, self.height, dp(24))
            Button:
                text: "Confirm"
                on_press: root.on_confirm()
                background_color: 0,0,0,0
                color: APP_COLORS['white']
                canvas.before:
                    Color:
                        rgba: APP_COLORS['red']
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24),]

# A popup containing a calendar widget for date selection.
<DatePickerPopup>:
    size_hint: 0.9, None
    height: dp(380)
    background_color: 0, 0, 0, .5
    BoxLayout:
        orientation: 'vertical'
        padding: '15dp'
        spacing: '5dp'
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]
        BoxLayout:
            size_hint_y: None
            height: dp(40)
            Button:
                text: '<'
                size_hint_x: 0.2
                on_press: calendar_widget.go_prev_month()
                background_color: 0,0,0,0
                color: APP_COLORS['primary']
            Label:
                id: month_year_label
                text: calendar_widget.current_date.strftime('%B %Y')
                font_size: '18sp'
                color: APP_COLORS['text']
            Button:
                text: '>'
                size_hint_x: 0.2
                on_press: calendar_widget.go_next_month()
                background_color: 0,0,0,0
                color: APP_COLORS['primary']
        CalendarWidget:
            id: calendar_widget
        Button:
            text: "Cancel"
            size_hint_y: None
            height: dp(40)
            on_press: root.dismiss()
            background_color: 0,0,0,0
            color: APP_COLORS['primary']

# The visual representation of a single workspace on the workspace screen.
<WorkspaceCard>:
    orientation: 'vertical'
    size_hint_y: None
    height: "120dp"
    padding: "12dp"
    spacing: "5dp"
    canvas.before:
        Color:
            rgba: APP_COLORS['hover'] if self.state == 'down' else APP_COLORS['white']
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [dp(12),]
        Color:
            rgba: APP_COLORS['border']
        Line:
            width: dp(1)
            rounded_rectangle: (self.x, self.y, self.width, self.height, dp(12))
    Label:
        text: root.workspace_name
        font_size: '18sp'
        color: APP_COLORS['text']
        bold: True
        halign: 'left'
        valign: 'top'
        text_size: self.width, None
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: self.minimum_height
        Label: # Spacer
        Label:
            text: root.last_edited_date + " " + root.last_edited_time
            font_size: '12sp'
            color: APP_COLORS['text_secondary']
            size_hint_x: None
            width: self.texture_size[0] + dp(10)
            halign: 'right'


# The widget representing a single list (column) in a board.
<ListWidget>:
    orientation: 'vertical'
    size_hint_x: None
    width: '280dp'
    spacing: '10dp'
    padding: '10dp'
    canvas.before:
        Color:
            rgba: APP_COLORS['card']
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [dp(12),]
    BoxLayout:
        size_hint_y: None
        height: dp(40)
        ListHeader:
            list_widget: root
            Label:
                text: '\uf00c' if root.is_completed else ''
                font_name: NERD_FONT
                size_hint_x: None
                width: self.texture_size[0]
                color: APP_COLORS['accent']
            Label:
                text: root.list_name
                font_size: '18sp'
                bold: True
                halign: 'left'
                valign: 'middle'
                text_size: self.size
                color: APP_COLORS['text']
                shorten: True
                shorten_from: 'right'
            Button:
                text: '\uf067'
                font_name: NERD_FONT
                font_size: '20sp'
                size_hint_x: None
                width: dp(40)
                on_press: root.add_card_popup()
                background_color: 0,0,0,0
                color: APP_COLORS['accent']
            Button:
                id: options_button
                text: '\uf142'
                font_name: NERD_FONT
                font_size: '20sp'
                size_hint_x: None
                width: dp(40)
                background_color: 0,0,0,0
                color: APP_COLORS['text_secondary']
                on_release: root.open_context_menu()
    ScrollView:
        do_scroll_y: True
        do_scroll_x: False
        bar_width: dp(4)
        BoxLayout:
            id: cards_layout
            orientation: 'vertical'
            spacing: '8dp'
            size_hint_y: None
            height: self.minimum_height


# The main widget for a board, containing a scrollable area for lists.
<BoardWidget>:
    Label:
        id: empty_board_label
        text: "Blank board. Try adding a list!"
        font_size: '18sp'
        halign: 'center'
        color: APP_COLORS['text_secondary']
        opacity: 0
        pos_hint: {'center_x': 0.5, 'center_y': 0.5}

    ScrollView:
        id: scroll_view
        do_scroll_x: True
        do_scroll_y: False
        bar_width: dp(6)
        bar_color: APP_COLORS['primary']
        bar_inactive_color: APP_COLORS['border']
        effect_cls: 'ScrollEffect'
        GridLayout:
            id: lists_container
            rows: 1
            spacing: dp(10)
            padding: [dp(10), dp(20), dp(10), dp(20)]
            size_hint_x: None
            width: self.minimum_width


# The widget for a single item in the bin screen.
<BinItem>:
    size_hint_y: None
    height: dp(56)
    padding: dp(8)
    spacing: dp(8)
    canvas.before:
        Color:
            rgba: APP_COLORS['white']
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        text: f"{root.item_name} ({root.item_type})"
        halign: 'left'
        valign: 'middle'
        text_size: self.size
        color: APP_COLORS['text']
    Button:
        text: "Restore"
        size_hint_x: None
        width: dp(100)
        on_press: root.bin_screen.restore_item(root.item_name, root.item_type)
        background_color: 0,0,0,0
        color: APP_COLORS['white']
        canvas.before:
            Color:
                rgba: APP_COLORS['accent']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(8),]
    Button:
        text: "Delete"
        size_hint_x: None
        width: dp(100)
        on_press: root.bin_screen.delete_item_permanently(root.item_name, root.item_type)
        background_color: 0,0,0,0
        color: APP_COLORS['white']
        canvas.before:
            Color:
                rgba: APP_COLORS['red']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(8),]


# The screen that displays all available workspaces.
<WorkspaceScreen>:
    BoxLayout:
        orientation: 'vertical'
        padding: [dp(10), dp(10), dp(10), dp(20)]
        spacing: "10dp"
        Label:
            text: 'Workspaces'
            font_size: '32sp'
            size_hint_y: None
            height: '50dp'
            color: APP_COLORS['primary_dark']
            bold: True
            halign: 'left'
            valign: 'center'
            text_size: self.width, None
            padding: [dp(5), 0]
        ScrollView:
            GridLayout:
                id: workspaces_grid
                cols: 2
                spacing: "10dp"
                padding: [dp(5), 0]
                size_hint_y: None
                height: self.minimum_height
        Button:
            text: '+ Add Workspace'
            size_hint_y: None
            height: '50dp'
            font_size: '18sp'
            color: APP_COLORS['white']
            background_color: 0,0,0,0
            on_press: app.create_new_workspace()
            canvas.before:
                Color:
                    rgba: APP_COLORS['primary'] if self.state == 'normal' else APP_COLORS['primary_dark']
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [dp(25),]


# The main screen for viewing and interacting with a board.
<BoardScreen>:
    BoxLayout:
        orientation: 'vertical'
        canvas.before:
            Color:
                rgba: APP_COLORS['background_dark']
            Rectangle:
                pos: self.pos
                size: self.size

        # --- HEADER ---
        BoxLayout:
            id: header_bar
            size_hint_y: None
            height: '56dp'
            padding: ('8dp', '8dp')
            spacing: '8dp'
            canvas.before:
                Color:
                    rgba: APP_COLORS['primary']
                Rectangle:
                    pos: self.pos
                    size: self.size
            Button:
                text: '\uf015'
                font_name: NERD_FONT
                font_size: '20sp'
                size_hint_x: None
                width: self.texture_size[0] + dp(30)
                on_press: root.go_back_to_workspaces()
                background_color: 0,0,0,0.2
                color: APP_COLORS['white']
            Button:
                text: '\uf053'
                font_name: NERD_FONT
                size_hint_x: None
                width: '48dp'
                bold: True
                on_press: root.load_previous_board()
                color: APP_COLORS['white']
                background_color: 0,0,0,0.2
            Label:
                id: board_indicator_label
                text: "Board"
                font_size: '20sp'
                bold: True
                color: APP_COLORS['white']
            Button:
                text: '\uf054'
                font_name: NERD_FONT
                size_hint_x: None
                width: '48dp'
                bold: True
                on_press: root.load_next_board()
                color: APP_COLORS['white']
                background_color: 0,0,0,0.2
            Button:
                text: '\uf142'
                font_name: NERD_FONT
                font_size: '20sp'
                size_hint_x: None
                width: '48dp'
                on_press: root.open_board_options()
                color: APP_COLORS['white']
                background_color: 0,0,0,0.2

        BoxLayout:
            id: board_container

        BoxLayout:
            size_hint_y: None
            height: self.minimum_height
            padding: [dp(10), dp(10), dp(10), dp(20)]
            Button:
                text: '+ Add New List'
                size_hint_y: None
                height: '50dp'
                font_size: '18sp'
                color: APP_COLORS['white']
                background_color: 0,0,0,0
                on_press: root.add_new_list_to_current_board()
                canvas.before:
                    Color:
                        rgba: APP_COLORS['accent'] if self.state == 'normal' else APP_COLORS['primary_dark']
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(25),]

# The screen for viewing and managing deleted items (the bin).
<BinScreen>:
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '56dp'
            padding: '10dp'
            spacing: '10dp'
            canvas.before:
                Color:
                    rgba: APP_COLORS['primary']
                Rectangle:
                    pos: self.pos
                    size: self.size
            Button:
                text: '< Back'
                size_hint_x: None
                width: self.texture_size[0] + dp(20)
                background_color: 0,0,0,0.2
                on_press: root.go_back_to_board()
            Label:
                text: "Bin"
                font_size: '22sp'
                bold: True
        ScrollView:
            GridLayout:
                id: bin_items_grid
                cols: 1
                size_hint_y: None
                height: self.minimum_height
                spacing: dp(2)
                padding: dp(2)

# The widget representing a single card in a list.
<CardWidget>:
    orientation: 'vertical'
    size_hint_y: None
    height: self.minimum_height
    padding: dp(12)
    spacing: dp(8)
    canvas.before:
        Color:
            rgba: APP_COLORS['background_dark'] if root.is_in_completed_list else APP_COLORS['white']
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(8)]
        Color:
            rgba: APP_COLORS['border']
        Line:
            rounded_rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1], dp(8))
            width: 1

    # This is the top row of the card
    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        spacing: dp(8)

        # Card Name
        Label:
            text: root.card_obj.name if root.card_obj else ''
            font_size: '16sp'
            color: APP_COLORS['text_secondary'] if root.is_in_completed_list else APP_COLORS['text']
            halign: 'left'
            valign: 'top'
            text_size: self.width, None
            height: self.texture_size[1]
            size_hint_x: 1 # Allow the name to take up available space
            bold: True
            
        # Priority Indicator - MOVED HERE
        BoxLayout:
            opacity: 1 if root.card_obj and root.card_obj.priority > 0 else 0
            size_hint: None, None
            size: self.minimum_width, dp(24)
            canvas.before:
                Color:
                    rgba: APP_COLORS['border'] if root.is_in_completed_list else (APP_COLORS['red'] + [0.15])
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [dp(6)]
            Label:
                text: root.card_obj.get_priority_display() if root.card_obj else ''
                font_size: '13sp'
                bold: True
                color: APP_COLORS['text_secondary'] if root.is_in_completed_list else APP_COLORS['red']
                size_hint: None, None
                size: self.texture_size
                padding: (dp(2), dp(4))

        # Overdue Tag
        BoxLayout:
            opacity: 1 if root.is_overdue and not root.is_in_completed_list else 0
            size_hint: None, None
            size: self.minimum_width, dp(24)
            pos_hint: {'top': 1}
            padding: (dp(8), dp(4))
            canvas.before:
                Color:
                    rgba: APP_COLORS['red'] + [0.15]
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [dp(6)]
            Label:
                text: "Overdue"
                font_size: '10sp'
                color: APP_COLORS['red']
                size: self.texture_size
                size_hint: None, None

    # Description
    Label:
        text: root.card_obj.description if root.card_obj else ''
        font_size: '12sp'
        color: APP_COLORS['text_secondary']
        halign: 'left'
        valign: 'top'
        text_size: self.width, None
        size_hint_y: None
        height: self.texture_size[1]

    # This is the bottom row of the card
    BoxLayout:
        size_hint_y: None
        height: dp(30)
        spacing: dp(8)

        # Priority Indicator was moved from here

        # Deadline
        Label:
            opacity: 1 if root.card_obj and root.card_obj.deadline else 0
            text: f"\uf017  {root.card_obj.deadline[:10]}" if root.card_obj and root.card_obj.deadline else ""
            font_name: NERD_FONT
            font_size: '12sp'
            color: APP_COLORS['text_secondary']
            size_hint_x: None
            width: self.texture_size[0]
            halign: 'left'
            valign: 'middle'

        # Spacer
        Widget:

        # Context menu button
        Button:
            text: '\uf142'
            font_name: NERD_FONT
            size_hint: None, None
            size: dp(30), dp(30)
            on_press: root.open_context_menu()
            background_color: 0,0,0,0
            color: APP_COLORS['text_secondary']

# A popup for creating or editing a card's details.
<CardPopup>:
    size_hint: 0.9, None
    height: content_box.height
    auto_dismiss: False
    background_color: 0, 0, 0, .5
    BoxLayout:
        id: content_box
        orientation: 'vertical'
        padding: dp(20)
        spacing: dp(15)
        size_hint_y: None
        height: self.minimum_height
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]

        Label:
            text: root.title
            font_size: '20sp'
            size_hint_y: None
            height: dp(40)
            color: APP_COLORS['text']
            bold: True

        TextInput:
            id: card_name_input
            hint_text: "Card Name"
            multiline: False
            size_hint_y: None
            height: dp(44)

        TextInput:
            id: card_desc_input
            hint_text: "Description"
            size_hint_y: None
            height: dp(88)

        # Priority Slider - Only shows when creating a new card
        BoxLayout:
            size_hint_y: None
            height: dp(48) if not root.card_obj else 0
            opacity: 1 if not root.card_obj else 0
            disabled: True if root.card_obj else False
            spacing: dp(10)
            Label:
                text: 'Priority:'
                size_hint_x: None
                width: dp(80)
                color: APP_COLORS['text']
            Slider:
                id: priority_slider
                min: 0
                max: 5
                step: 1
                value: 0
            Label:
                text: str(int(priority_slider.value))
                size_hint_x: None
                width: dp(20)
                color: APP_COLORS['text']

        Button:
            id: card_deadline_button
            text: "Set Deadline"
            size_hint_y: None
            height: dp(44)
            on_press: root.open_date_picker()
            background_color: 0,0,0,0
            color: APP_COLORS['primary']
            canvas.before:
                Color:
                    rgba: APP_COLORS['white']
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [dp(8),]
                Color:
                    rgba: APP_COLORS['border']
                Line:
                    width: dp(1)
                    rounded_rectangle: (self.x, self.y, self.width, self.height, dp(8))
        
        BoxLayout:
            size_hint_y: None
            height: dp(48)
            spacing: dp(10)
            Button:
                text: "Cancel"
                on_press: root.dismiss()
                background_color: 0,0,0,0
                color: APP_COLORS['text_secondary']
                canvas.before:
                    Color:
                        rgba: APP_COLORS['white']
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24),]
                    Color:
                        rgba: APP_COLORS['border']
                    Line:
                        width: dp(1)
                        rounded_rectangle: (self.x, self.y, self.width, self.height, dp(24))
            Button:
                text: "Save"
                on_press: root.save_card()
                background_color: 0,0,0,0
                color: APP_COLORS['white']
                canvas.before:
                    Color:
                        rgba: APP_COLORS['primary']
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24),]

<DraggableListItem>:
    size_hint_y: None
    height: dp(56)
    list_name: ''
    is_dragged: False
    canvas.before:
        Color:
            rgba: APP_COLORS['hover'] if root.is_dragged else APP_COLORS['white']
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: APP_COLORS['border']
        Line:
            points: self.x, self.y, self.x + self.width, self.y
    Label:
        text: "::"
        font_name: NERD_FONT
        size_hint_x: None
        width: dp(40)
        color: APP_COLORS['text_secondary']
    Label:
        text: root.list_name
        color: APP_COLORS['text']
        halign: 'left'
        valign: 'middle'
        text_size: self.size

<RearrangeListsPopup>:
    size_hint: 0.85, 0.8
    auto_dismiss: False
    board: None
    board_screen: None
    background_color: 0, 0, 0, .5
    BoxLayout:
        orientation: 'vertical'
        padding: '15dp'
        spacing: '10dp'
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            Color:
                rgba: APP_COLORS['white']
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [dp(15),]
        Label:
            text: "Rearrange Lists"
            font_size: '20sp'
            size_hint_y: None
            height: '40dp'
            bold: True
            color: APP_COLORS['text']
        Label:
            text: "Hold and drag a list to change its order"
            font_size: '14sp'
            size_hint_y: None
            height: self.texture_size[1]
            color: APP_COLORS['text_secondary']
        ScrollView:
            bar_width: dp(4)
            GridLayout:
                id: lists_container
                cols: 1
                spacing: dp(2)
                size_hint_y: None
                height: self.minimum_height
        BoxLayout:
            size_hint_y: None
            height: dp(48)
            spacing: dp(10)
            Button:
                text: "Cancel"
                on_press: root.dismiss()
                background_color: 0,0,0,0
                color: APP_COLORS['text_secondary']
                canvas.before:
                    Color:
                        rgba: APP_COLORS['white']
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24),]
                    Color:
                        rgba: APP_COLORS['border']
                    Line:
                        width: dp(1)
                        rounded_rectangle: (self.x, self.y, self.width, self.height, dp(24))
            Button:
                text: "Save"
                on_press: root.save_order()
                background_color: 0,0,0,0
                color: APP_COLORS['white']
                canvas.before:
                    Color:
                        rgba: APP_COLORS['primary']
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24),]